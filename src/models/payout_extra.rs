/*
 * F2 Pool API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct PayoutExtra {
    /// Payout amount
    #[serde(rename = "value", skip_serializing_if = "Option::is_none")]
    pub value: Option<f64>,
    /// The wallet address or account name that receive the coins
    #[serde(rename = "address", skip_serializing_if = "Option::is_none")]
    pub address: Option<String>,
    /// On-chain transaction ID
    #[serde(rename = "tx_id", skip_serializing_if = "Option::is_none")]
    pub tx_id: Option<String>,
    /// Payout timestamp
    #[serde(rename = "paid_time", skip_serializing_if = "Option::is_none")]
    pub paid_time: Option<i64>,
    /// The type of the wallet address (mainnet wallet address or third part wallet address)
    #[serde(rename = "wallet_type", skip_serializing_if = "Option::is_none")]
    pub wallet_type: Option<String>,
    /// Transaction fee
    #[serde(rename = "tip", skip_serializing_if = "Option::is_none")]
    pub tip: Option<f64>,
}

impl PayoutExtra {
    pub fn new() -> PayoutExtra {
        PayoutExtra {
            value: None,
            address: None,
            tx_id: None,
            paid_time: None,
            wallet_type: None,
            tip: None,
        }
    }
}

