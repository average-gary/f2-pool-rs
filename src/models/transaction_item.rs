/*
 * F2 Pool API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct TransactionItem {
    /// ID of the transaction
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i64>,
    /// Type of the transaction
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<String>,
    /// If the changed_balance is greater than 0, it is the income, less than 0, it is the outcome
    #[serde(rename = "changed_balance", skip_serializing_if = "Option::is_none")]
    pub changed_balance: Option<f64>,
    /// The payout timestamp
    #[serde(rename = "created_at", skip_serializing_if = "Option::is_none")]
    pub created_at: Option<i64>,
    #[serde(rename = "mining_extra", skip_serializing_if = "Option::is_none")]
    pub mining_extra: Option<Box<models::MiningExtra>>,
    #[serde(rename = "payout_extra", skip_serializing_if = "Option::is_none")]
    pub payout_extra: Option<Box<models::PayoutExtra>>,
}

impl TransactionItem {
    pub fn new() -> TransactionItem {
        TransactionItem {
            id: None,
            r#type: None,
            changed_balance: None,
            created_at: None,
            mining_extra: None,
            payout_extra: None,
        }
    }
}

